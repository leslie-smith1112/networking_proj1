import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Scanner;
import java.nio.file.Paths;
import java.util.Random;
public class Main extends Thread {
    ObjectOutputStream out;
    public static void main(String[] args) {
        Main thread = new Main(); // writing thread
        thread.start();
        System.out.println("This code is outside of the thread"); // main thread
        ServerSocket serverSocket=null;   //serversocket used to lisen on port number 8000
        Socket connection = null;
        Random rand = new Random();
        int sPort = rand.nextInt(7000);
        try{

            serverSocket = new ServerSocket(sPort, 10);
            System.out.println("Server running on " + sPort);
        }catch(IOException e){
            e.printStackTrace();
            System.out.println("Server error");
        }
        while(true) {
            try {
                connection = serverSocket.accept();
                System.out.println("Connection received from " + connection.getInetAddress().getHostName());
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("Connection error");
            }
            new ServerThread(connection).start();
        }
    }


    public void run() {
        String[] command_div;
        String command;
        String exists_put;
        boolean exists;
        String filename;
        ObjectInputStream in = null;
        InputStream in_stream;
        FileInputStream fis_put;
        BufferedInputStream bis;
        BufferedOutputStream bos_put = null;
        Socket writingSocket = null;
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        try {

            Scanner keyboard = new Scanner(System.in);
            System.out.println("Please enter the port number you would like to connect to: ");// writing thread
            int port = keyboard.nextInt();
            writingSocket = new Socket("localhost", port);
            System.out.println("Port connection successfully made.");
            out = new ObjectOutputStream(writingSocket.getOutputStream());
            out.flush();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        while(true){
            try {
                command = reader.readLine();
                sendMessage(command);
                command_div = command.split(" ");
                if(command_div[0].equals("transfer")){
                    sendMessage(command);
                    filename = System.getProperty("user.dir") +"/" + command_div[1];
                    Path file_path = Paths.get(filename);
                    File tmpFile = new File(filename);
                    exists = tmpFile.exists();
                    if(exists){
                        sendMessage("true");
                    }else{
                        sendMessage("false");
                    }
                    if(exists){
                        int file_size = (int) Files.size(file_path);
                        // first send file size
                        sendMessage(String.valueOf(file_size));

                        byte[] data = new byte[1000];
                        try
                        {
                            fis_put = new FileInputStream(tmpFile);
                            bis = new BufferedInputStream(fis_put);
                            int byteContent;
                            while ((byteContent = bis.read(data)) > 0)
                            {
                                bos_put.write(data, 0, byteContent);
                            }
                            bos_put.flush();
                            bis.close();
                            fis_put.close();
                            //message = (String)in.readObject();
                        }
                        catch(EOFException eofe)
                        {
                            System.out.println("End of file reached.");

                        }
                        catch (IOException e)
                        {
                            e.printStackTrace();
                        }
                    }else{
                        System.out.println("Please enter valid command and existing file.");
                    }
                }
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
    }
    void sendMessage(String msg)
    {
        try{
            //stream write the message
            out.writeObject(msg);
            out.flush();
            System.out.println("Send message: " + msg);
        }
        catch(IOException ioException){
            ioException.printStackTrace();
        }
    }
}

class ServerThread extends Thread {

    protected Socket socket;
    String commandS;
    public ServerThread(Socket clientsocket){
        this.socket = clientsocket;
    }
    ObjectOutputStream outS = null;
    ObjectInputStream inS = null;
    FileInputStream fis_getS = null;
    BufferedInputStream bisS = null;
    String[] command_div = null;
    BufferedOutputStream bos_getS = null;
    String filenameS;
    String exists_put;
    InputStream in_stream = null;
    FileOutputStream fos_putS;
    boolean existsS = false;
    BufferedOutputStream bos_putS;
    public void run() {
        try {
            outS = new ObjectOutputStream(socket.getOutputStream());
            outS.flush();
            inS = new ObjectInputStream(socket.getInputStream());
            //for download
            bos_getS = new BufferedOutputStream(socket.getOutputStream());
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        while (true)
        {
            try {
                commandS = (String) inS.readObject();
                System.out.println(commandS);
                command_div = commandS.split(" ");
                if(command_div[0].equals("transfer")){

                    exists_put = (String)inS.readObject();
                    if(exists_put.equals("true")){
                        filenameS = "new" + command_div[1];
                        String file_size_string = (String)inS.readObject();
                        int file_size = Integer.parseInt(file_size_string);
                        int buffer_size = 1000;

                        //filename = "new.pptx";// + command_div[1];
                        in_stream = socket.getInputStream();

                        fos_putS = new FileOutputStream(filenameS);
                        bos_putS = new BufferedOutputStream(fos_putS);
                        byte data[] = new byte[buffer_size];
                        long byteContent = 0;

                        // read first buffers
                        for (long i = 0; i < (file_size / buffer_size); i++)
                        {
                            byteContent += in_stream.read(data, 0, buffer_size);
                            bos_putS.write(data, 0, buffer_size);
                        }
                        // read remaining bytes
                        byteContent += in_stream.read(data, 0, file_size % buffer_size);
                        bos_putS.write(data, 0, file_size % buffer_size);

                        assert byteContent == file_size;
                        System.out.println("count " + byteContent);
                        bos_putS.close();
                        fos_putS.close();
                    }
                }
            } catch (IOException e) {
                throw new RuntimeException(e);
            } catch (ClassNotFoundException e) {
                throw new RuntimeException(e);
            }
        }
    }
    void sendMessage(String msg)
    {
        try{
            //stream write the message
            outS.writeObject(msg);
            outS.flush();
            System.out.println("Send message: " + msg);
        }
        catch(IOException ioException){
            ioException.printStackTrace();
        }
    }
}
